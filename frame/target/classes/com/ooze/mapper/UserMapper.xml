<?xml version="1.0" encoding="UTF-8"?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ooze.dao.UserDao">
<!--设置model类和数据库中表的字段一一对应，注意数据库字段和model类中的字段名称不致，此处一定要！-->
	<resultMap id="UserMap" type="com.ooze.model.User">
		<id column="user_id" property="userId" jdbcType="INTEGER" />
		<result column="user_name" property="userName" jdbcType="VARCHAR" />
		<result column="password" property="password" jdbcType="VARCHAR" />
		<result column="account" property="account" jdbcType="VARCHAR" />
	</resultMap>
	<!-- 查询单条记录 -->
	<select id="selectUserById" parameterType="int" resultMap="UserMap">
		SELECT * FROM user WHERE USER_ID = #{userId}
	</select>
	
	<select id="getUserByAccount" resultMap="UserMap" parameterType="string">
	    select * from user where account=#{account}
	</select>
	
	<select id="getUserIdByUserName" resultType="int" parameterType="string">
	    select user_id from user where user_name=#{userName}
	</select>
	
	<select id="getRoleIdByUserId" resultType="integer" parameterType="string">
	    select role_id from user_role where user_id=#{userId}
	</select>
	
	<resultMap id="RoleMap" type="com.ooze.model.Role">
		<id column="role_id" property="roleId" jdbcType="INTEGER" />
		<result column="role_name" property="roleName" jdbcType="VARCHAR" />
	</resultMap>
	
	<select id="findRoles" parameterType="int" resultMap="RoleMap">
	    select a.role_id,b.role_name from user_role a 
	    left join role b 
	    on a.role_id=b.role_id 
	    where a.user_id=#{userId}
	</select>
	
	<resultMap id="PermissionMap" type="com.ooze.model.Permission">
		<id column="permission_id" property="permissionId" jdbcType="INTEGER" />
		<result column="permission_name" property="permissionName" jdbcType="VARCHAR" />
	</resultMap>
	
	<select id="findPermissions" parameterType="int" resultMap="PermissionMap">
	    select a.permission_id,b.permission_name from role_permission a 
	    left join permission b 
	    on a.permission_id=b.permission_id 
	    where a.role_id=#{roleId}
	</select>
	
	<select id="getUserList" resultMap="UserMap">
	    select * from user where user_id is not null and user_id !=''
	</select>
	
	<delete id="delUser" parameterType="int">
	    delete from user where user_id=#{userId}
	</delete>
	
	<delete id="delUsers" parameterType="int">
        delete from user where user_id in
        <foreach item="userId" collection="array" open="(" separator="," close=")">
            #{userId}
        </foreach>
    </delete>
	
	<insert id="addUser" parameterType="com.ooze.model.User">
	    insert into user (user_name,password,account) values 
	    (#{userName},#{password},#{account})
	</insert>
	
	<update id="updateUser" parameterType="com.ooze.model.User">
	    update user 
	   <set>
	      <if test="userName != null and userName != ''">
	        user_name = #{userName,jdbcType=VARCHAR},
	      </if>
	      <if test="password != null and password != ''">
	        password = #{password,jdbcType=VARCHAR},
	      </if>
	      <if test="account != null and account != ''">
	        account = #{account,jdbcType=VARCHAR},
	      </if>
	   </set>  
	   where user_id=#{userId} 
	</update>
	
</mapper>